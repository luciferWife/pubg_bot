import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üîπ –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤ (–Ω–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Render!)

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ Render Environment Variables.")

print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... (–¢–æ–∫–µ–Ω: {TOKEN[:5]}...)")  

# üîπ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())  # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
class RegistrationState(StatesGroup):
    team_name = State()
    player1 = State()
    player2 = State()
    player3 = State()
    player4 = State()
    reserve = State()

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton(text="üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã", callback_data="register")],
        [InlineKeyboardButton(text="üì¢ –ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏", callback_data="socials")]
    ])
    return keyboard

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üî• **–°–∞–ª–µ–º, –¥–æ—Å—Ç–∞—Ä! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–π –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ –±–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ PUBG Mobile KZ!** üéÆ\n\n"
        "‚öîÔ∏è **–ì–æ—Ä—è—á–∏–µ –∫–∞—Å—Ç–æ–º–∫–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã** –æ—Ç –∫–ª–∞–Ω–∞ **„ÄéJT„Äè Bloody Demons** –∏ **lucifer„Ç∑wife** —É–∂–µ –∂–¥—É—Ç —Å–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤!\n\n"
        "üí° **–¢—ã –≥–æ—Ç–æ–≤ –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–∏–ª—å–Ω–µ–π—à–∏–π?** –ñ–º–∏ **/start** –∏ –≤–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–µ –∏–º—è –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ—ë–≤! ‚öî",
        reply_markup=main_menu()
    )

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã" (–Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)
@dp.callback_query(lambda c: c.data == "register")
@dp.message(Command("register"))
async def register_team(event: types.Message | types.CallbackQuery, state: FSMContext):
    message = event if isinstance(event, types.Message) else event.message
    await message.answer("üèÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(RegistrationState.team_name)

# üîπ –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(RegistrationState.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    await state.update_data(team_name=message.text)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:")
    await state.set_state(RegistrationState.player1)

# üîπ –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ 1
@dp.message(RegistrationState.player1)
async def process_player1(message: types.Message, state: FSMContext):
    await state.update_data(player1=message.text)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞:")
    await state.set_state(RegistrationState.player2)

# üîπ –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ 2
@dp.message(RegistrationState.player2)
async def process_player2(message: types.Message, state: FSMContext):
    await state.update_data(player2=message.text)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∏–≥—Ä–æ–∫–∞:")
    await state.set_state(RegistrationState.player3)

# üîπ –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ 3
@dp.message(RegistrationState.player3)
async def process_player3(message: types.Message, state: FSMContext):
    await state.update_data(player3=message.text)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞:")
    await state.set_state(RegistrationState.player4)

# üîπ –®–∞–≥ 5: –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ 4
@dp.message(RegistrationState.player4)
async def process_player4(message: types.Message, state: FSMContext):
    await state.update_data(player4=message.text)
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(RegistrationState.reserve)

# üîπ –®–∞–≥ 6: –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@dp.message(RegistrationState.reserve)
async def process_reserve(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reserve_player = message.text if message.text.lower() != "–Ω–µ—Ç" else "–ù–µ—Ç"

    confirmation_text = (
        f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** ‚úÖ\n\n"
        f"üèÜ **–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:** {data['team_name']}\n"
        f"üë§ **–ò–≥—Ä–æ–∫–∏:**\n"
        f"  1Ô∏è‚É£ {data['player1']}\n"
        f"  2Ô∏è‚É£ {data['player2']}\n"
        f"  3Ô∏è‚É£ {data['player3']}\n"
        f"  4Ô∏è‚É£ {data['player4']}\n"
        f"üë• **–ó–∞–ø–∞—Å–Ω–æ–π –∏–≥—Ä–æ–∫:** {reserve_player}\n\n"
        f"üì¢ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
    )

    await message.answer(confirmation_text)
    
    if ADMIN_CHAT_ID:
        await bot.send_message(ADMIN_CHAT_ID, f"üöÄ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!**\n\n{confirmation_text}")

    await state.clear()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot, skip_updates=True)  # skip_updates=True –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

if __name__ == "__main__":
    asyncio.run(main())
